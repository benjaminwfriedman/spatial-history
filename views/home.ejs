<%- include("header") -%>
<script type="text/javascript">
  const zoomLev = 14;
  const styleChoice = 'mapbox://styles/mapbox/light-v10';
  const accessTok = 'pk.eyJ1IjoiYmVubnlmcmllZG1hbjIiLCJhIjoiY2s5YzIwZHliMDBqaDNsbjgyeXB1MDdybCJ9.FANNsUZRFIzmBFsaRdq2SQ';

  var data = <%-JSON.stringify(data)%>
    console.log(data);
  database2 = [];

  function createGeoJSONLikeObj(type, g_type, coordinates, title, disc, tag) {
    const geojsonLike = {
      'type': type,
      'geometry': {
        'type': g_type,
        'coordinates': coordinates

      },
      'properties': {
        'title': title,
        'significance': disc,
        'type': tag
      }
    }
    return geojsonLike;
  }

  for (i = 0; i < data.length; i++) {
    type = data[i].type;
    g_type = data[i].g_type;
    coordinates = data[i].coordinates;
    title = data[i].title;
    disc = data[i].disc;
    tag = data[i].tag;
    historicPoint = createGeoJSONLikeObj(type, g_type, coordinates, title, disc, tag)
    database2.push(historicPoint);
  }

  historic_homes = [];
  race = [];
  native = [];



  for (let i = 0; i < database2.length; i++) {
    if (database2[i].properties.type === 'historic home') {
      historic_homes.push(database2[i]);
    }
    if (database2[i].properties.type === 'race') {
      race.push(database2[i]);
    }
    if (database2[i].properties.type === 'native') {
      native.push(database2[i]);
    }

  }

  console.log(historic_homes);


  function addLocationDot(map, lon, lat) {
    var size = 100;

    // implementation of CustomLayerInterface to draw a pulsing dot icon on the map
    // see https://docs.mapbox.com/mapbox-gl-js/api/#customlayerinterface for more info
    var pulsingDot = {
      width: size,
      height: size,
      data: new Uint8Array(size * size * 4),

      // get rendering context for the map canvas when layer is added to the map
      onAdd: function() {
        var canvas = document.createElement('canvas');
        canvas.width = this.width;
        canvas.height = this.height;
        this.context = canvas.getContext('2d');
      },

      // called once before every frame where the icon will be used
      render: function() {
        var duration = 1000;
        var t = (performance.now() % duration) / duration;

        var radius = (size / 2) * 0.3;
        var outerRadius = (size / 2) * 0.7 * t + radius;
        var context = this.context;

        // draw outer circle
        context.clearRect(0, 0, this.width, this.height);
        context.beginPath();
        context.arc(
          this.width / 2,
          this.height / 2,
          outerRadius,
          0,
          Math.PI * 2
        );
        // outwards fill style
        context.fillStyle = 'rgba(255, 200, 200,' + (1 - t) + ')';
        context.fill();

        // draw inner circle
        context.beginPath();
        context.arc(
          this.width / 2,
          this.height / 2,
          radius,
          0,
          Math.PI * 2
        );
        //main fill style
        context.fillStyle = 'rgba(255, 100, 100, 1)';
        context.strokeStyle = 'white';
        context.lineWidth = 2 + 4 * (1 - t);
        context.fill();
        context.stroke();

        // update this image's data with data from the canvas
        this.data = context.getImageData(
          0,
          0,
          this.width,
          this.height
        ).data;

        // continuously repaint the map, resulting in the smooth animation of the dot
        map.triggerRepaint();

        // return `true` to let the map know that the image was updated
        return true;
      }
    };

    map.on('load', function() {
      map.addImage('pulsing-dot', pulsingDot, {
        pixelRatio: 2
      });


      map.addSource('current-loc-dot', {
        'type': 'geojson',
        'data': {
          'type': 'FeatureCollection',
          'features': [{
            'type': 'Feature',
            'geometry': {
              'type': 'Point',
              'coordinates': [lon, lat]
            }
          }]
        }
      });
      map.addLayer({
        'id': 'current-loc-dot-layer',
        'type': 'symbol',
        'source': 'current-loc-dot',
        'layout': {
          'icon-image': 'pulsing-dot'
        }
      });

      map.addControl(
        new MapboxGeocoder({
          accessToken: mapboxgl.accessToken,
          mapboxgl: mapboxgl
        })
      );

      map.loadImage(
        'https://i.postimg.cc/gjCGr1bS/noun-native-american-2175195.png',
        function(error, native_img) {
          if (error) throw error;
          map.addImage('native-icon', native_img);

          map.loadImage(
            'https://i.postimg.cc/xTJ1JB6Y/noun-Protest-15242.png',
            function(error, race_img) {
              if (error) throw error;
              map.addImage('race-icon', race_img);

              map.loadImage(
                'https://i.postimg.cc/KzhNbc6p/noun-House-3095061.png',
                function(error, home_img) {
                  if (error) throw error;
                  map.addImage('home-icon', home_img);

                  //add popup info
                  var popup = new mapboxgl.Popup({
                    closeButton: false,
                    closeOnClick: false
                  });







                  // Add a GeoJSON for historic homes
                  map.addSource('Historic Homes', {
                    'type': 'geojson',
                    'data': {
                      'type': 'FeatureCollection',
                      'features': historic_homes
                    }
                  });

                  // Add a symbol layer for Historic Homes
                  map.addLayer({
                    'id': 'Historic-Homes',
                    'type': 'symbol',
                    'source': 'Historic Homes',
                    'layout': {
                      'icon-image': 'home-icon',
                      'icon-size': 0.05,

                    },
                  });

                  //add interaction for historic homes
                  map.on('mouseenter', 'Historic-Homes', function(e) {
                    // Change the cursor style as a UI indicator.
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var description = e.features[0].properties.title;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    // Populate the popup and set its coordinates
                    // based on the feature found.
                    popup
                      .setLngLat(coordinates)
                      .setHTML(description)
                      .addTo(map);
                  });

                  map.on('mouseleave', 'Historic-Homes', function() {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                  });

                  map.on('click', 'Historic-Homes', function(e) {
                    title = e.features[0].properties.title;
                    significance = e.features[0].properties.significance;
                    document.getElementById('content').innerHTML = '<h3>' + title + '</h3>' + significance;
                  });





                  //add source for racial justice
                  map.addSource('Racial Justice', {
                    'type': 'geojson',
                    'data': {
                      'type': 'FeatureCollection',
                      'features': race
                    }
                  });

                  // Add a symbol layer for racial justice
                  map.addLayer({
                    'id': 'Racial-Justice',
                    'type': 'symbol',
                    'source': 'Racial Justice',
                    'layout': {
                      'icon-image': 'race-icon',
                      'icon-size': 0.05,

                    },
                  });

                  map.on('mouseenter', 'Racial-Justice', function(e) {
                    // Change the cursor style as a UI indicator.
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var description = e.features[0].properties.title;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    // Populate the popup and set its coordinates
                    // based on the feature found.
                    popup
                      .setLngLat(coordinates)
                      .setHTML(description)
                      .addTo(map);
                  });

                  map.on('mouseleave', 'Racial-Justice', function() {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                  });

                  map.on('click', 'Racial-Justice', function(e) {
                    title = e.features[0].properties.title;
                    significance = e.features[0].properties.significance;
                    document.getElementById('content').innerHTML = '<h3>' + title + '</h3><p>' + significance + '</p>';
                  });






                  //add source for Native History
                  map.addSource('Native', {
                    'type': 'geojson',
                    'data': {
                      'type': 'FeatureCollection',
                      'features': native
                    }
                  });

                  // Add a symbol layer for racial justice
                  map.addLayer({
                    'id': 'Native',
                    'type': 'symbol',
                    'source': 'Native',
                    'layout': {
                      'icon-image': 'native-icon',
                      'icon-size': 0.05,

                    },
                  });

                  map.on('mouseenter', 'Native', function(e) {
                    // Change the cursor style as a UI indicator.
                    map.getCanvas().style.cursor = 'pointer';

                    var coordinates = e.features[0].geometry.coordinates.slice();
                    var description = e.features[0].properties.title;

                    // Ensure that if the map is zoomed out such that multiple
                    // copies of the feature are visible, the popup appears
                    // over the copy being pointed to.
                    while (Math.abs(e.lngLat.lng - coordinates[0]) > 180) {
                      coordinates[0] += e.lngLat.lng > coordinates[0] ? 360 : -360;
                    }

                    // Populate the popup and set its coordinates
                    // based on the feature found.
                    popup
                      .setLngLat(coordinates)
                      .setHTML(description)
                      .addTo(map);
                  });

                  map.on('mouseleave', 'Native', function() {
                    map.getCanvas().style.cursor = '';
                    popup.remove();
                  });

                  map.on('click', 'Native', function(e) {
                    title = e.features[0].properties.title;
                    significance = e.features[0].properties.significance;
                    document.getElementById('content').innerHTML = '<h3>' + title + '</h3><p>' + significance + '</p>';
                  });





                }
              );
            }
          );
        }
      );
    });
  };




  const successCallback = (position) => {
    let longitude = position.coords.longitude;
    let latitude = position.coords.latitude;
    mapboxgl.accessToken = accessTok;
    var map = new mapboxgl.Map({
      container: 'map', // container id
      style: styleChoice, // style URL
      center: [longitude, latitude], // starting position [lng, lat]
      zoom: zoomLev // starting zoom
    });
    addLocationDot(map, longitude, latitude);
  };

  const errorCallback = (error) => {
    console.error(error);
    let longitude = -60;
    let latitude = 40;
    mapboxgl.accessToken = accessTok;
    var map = new mapboxgl.Map({
      container: 'map', // container id
      style: styleChoice, // style URL
      center: [-74.5, 40], // starting position [lng, lat]
      zoom: zoomLev // starting zoom
    });
    alert("Please Enable Location on this Device.")
  };

  navigator.geolocation.getCurrentPosition(successCallback, errorCallback);
</script>
</head>

<body>

  <nav class="navbar navbar-light bg-light">
    <span class="navbar-brand mb-0 h1">Mapstery</span>
    <form class="form-inline">
      <input class="form-control mr-sm-2" type="search" placeholder="Search Local History" aria-label="Search">
      <button class="btn btn-outline-success my-2 my-sm-0" type="submit">Search</button>
    </form>
  </nav>
  <div id="map"></div>
  <div id='content' class="content-pane container-lg">

  </div>
  <%- include("footer") -%>
